From 17a62f212a1c525544b7c3ed5183a574bfc12b0c Mon Sep 17 00:00:00 2001
From: Jaegeuk Kim <jaegeuk@kernel.org>
Date: Mon, 7 Dec 2015 13:33:06 -0800
Subject: [PATCH] external/sqlite: support F2FS inmemory journal

Signed-off-by: Jaegeuk Kim <jaegeuk@kernel.org>
---
 dist/Android.mk |  2 ++
 dist/sqlite3.c  | 80 +++++++++++++++++++++++++++++++++++++++++++++++++++++++++
 2 files changed, 82 insertions(+)

diff --git a/dist/Android.mk b/dist/Android.mk
index 20b3a0a..e4f0af3 100644
--- a/dist/Android.mk
+++ b/dist/Android.mk
@@ -30,6 +30,8 @@ common_sqlite_flags := \
 	-DSQLITE_DEFAULT_FILE_PERMISSIONS=0600
 
 device_sqlite_flags := $(common_sqlite_flags) \
+    -DSQLITE_DISABLE_DIRSYNC \
+    -DSQLITE_USE_INMEM_JOURNAL \
     -DSQLITE_ENABLE_ICU \
     -DUSE_PREAD64 \
     -Dfdatasync=fdatasync \
diff --git a/dist/sqlite3.c b/dist/sqlite3.c
index 008512c..58383c0 100644
--- a/dist/sqlite3.c
+++ b/dist/sqlite3.c
@@ -947,6 +947,7 @@ struct sqlite3_io_methods {
   int (*xUnlock)(sqlite3_file*, int);
   int (*xCheckReservedLock)(sqlite3_file*, int *pResOut);
   int (*xFileControl)(sqlite3_file*, int op, void *pArg);
+  int (*xIoctl)(sqlite3_file*, int op);
   int (*xSectorSize)(sqlite3_file*);
   int (*xDeviceCharacteristics)(sqlite3_file*);
   /* Methods above are valid for version 1 */
@@ -10737,6 +10738,7 @@ SQLITE_PRIVATE int sqlite3OsUnlock(sqlite3_file*, int);
 SQLITE_PRIVATE int sqlite3OsCheckReservedLock(sqlite3_file *id, int *pResOut);
 SQLITE_PRIVATE int sqlite3OsFileControl(sqlite3_file*,int,void*);
 SQLITE_PRIVATE void sqlite3OsFileControlHint(sqlite3_file*,int,void*);
+SQLITE_PRIVATE int sqlite3OsIoctl(sqlite3_file*,int);
 #define SQLITE_FCNTL_DB_UNCHANGED 0xca093fa0
 SQLITE_PRIVATE int sqlite3OsSectorSize(sqlite3_file *id);
 SQLITE_PRIVATE int sqlite3OsDeviceCharacteristics(sqlite3_file *id);
@@ -16593,6 +16595,10 @@ SQLITE_PRIVATE void sqlite3OsFileControlHint(sqlite3_file *id, int op, void *pAr
   (void)id->pMethods->xFileControl(id, op, pArg);
 }
 
+SQLITE_PRIVATE int sqlite3OsIoctl(sqlite3_file *id, int op){
+  return id->pMethods->xIoctl(id, op);
+}
+
 SQLITE_PRIVATE int sqlite3OsSectorSize(sqlite3_file *id){
   int (*xSectorSize)(sqlite3_file*) = id->pMethods->xSectorSize;
   return (xSectorSize ? xSectorSize(id) : SQLITE_DEFAULT_SECTOR_SIZE);
@@ -25330,6 +25336,7 @@ SQLITE_PRIVATE const char *sqlite3OpcodeName(int i){
 #include <sys/types.h>
 #include <sys/stat.h>
 #include <fcntl.h>
+#include <sys/ioctl.h>
 #include <unistd.h>
 /* #include <time.h> */
 #include <sys/time.h>
@@ -25792,6 +25799,15 @@ static int posixFchown(int fd, uid_t uid, gid_t gid){
 static int openDirectory(const char*, int*);
 static int unixGetpagesize(void);
 
+#ifdef SQLITE_USE_INMEM_JOURNAL
+#define F2FS_IOCTL_MAGIC	0xf5
+#define F2FS_IOC_START_ATOMIC_WRITE	_IO(F2FS_IOCTL_MAGIC, 1)
+#define F2FS_IOC_COMMIT_ATOMIC_WRITE	_IO(F2FS_IOCTL_MAGIC, 2)
+#define F2FS_IOC_START_VOLATILE_WRITE	_IO(F2FS_IOCTL_MAGIC, 3)
+#define F2FS_IOC_RELEASE_VOLATILE_WRITE	_IO(F2FS_IOCTL_MAGIC, 4)
+#define F2FS_IOC_ABORT_VOLATILE_WRITE	_IO(F2FS_IOCTL_MAGIC, 5)
+#endif
+
 /*
 ** Many system calls are accessed through pointer-to-functions so that
 ** they may be overridden at runtime to facilitate fault injection during
@@ -25926,6 +25942,9 @@ static struct unix_syscall {
   { "getpagesize",  (sqlite3_syscall_ptr)unixGetpagesize, 0 },
 #define osGetpagesize ((int(*)(void))aSyscall[24].pCurrent)
 
+  { "ioctl",     (sqlite3_syscall_ptr)ioctl,        0 },
+#define osIoctl	((int(*)(int,int))aSyscall[25].pCurrent)
+
 #endif
 
 }; /* End of the overrideable system calls */
@@ -28955,6 +28974,11 @@ static int full_fsync(int fd, int fullSync, int dataOnly){
   ** so currently we default to the macro that redefines fdatasync to fsync
   */
   rc = fsync(fd);
+#elif SQLITE_USE_INMEM_JOURNAL
+  rc = osIoctl(fd, F2FS_IOC_COMMIT_ATOMIC_WRITE);
+  if( rc && (errno==ENOTSUP||errno==ENOTTY) ){
+    rc = fdatasync(fd);
+  }
 #else 
   rc = fdatasync(fd);
 #if OS_VXWORKS
@@ -29341,6 +29365,14 @@ static int unixFileControl(sqlite3_file *id, int op, void *pArg){
   return SQLITE_NOTFOUND;
 }
 
+static int unixIoctl(sqlite3_file *id, int op){
+  unixFile *pFile = (unixFile*)id;
+  int err = osIoctl(pFile->h, op);
+  if ( err )
+    return SQLITE_IOERR;
+  return SQLITE_OK;
+}
+ 
 /*
 ** Return the sector size in bytes of the underlying block device for
 ** the specified file. This is almost always 512 bytes, but may be
@@ -30460,6 +30492,7 @@ static const sqlite3_io_methods METHOD = {                                   \
    UNLOCK,                     /* xUnlock */                                 \
    CKLOCK,                     /* xCheckReservedLock */                      \
    unixFileControl,            /* xFileControl */                            \
+   unixIoctl,                  /* xIoclt */                                  \
    unixSectorSize,             /* xSectorSize */                             \
    unixDeviceCharacteristics,  /* xDeviceCapabilities */                     \
    SHMMAP,                     /* xShmMap */                                 \
@@ -31375,6 +31408,12 @@ static int unixOpen(
   
   rc = fillInUnixFile(pVfs, fd, pFile, zPath, ctrlFlags);
 
+#ifdef SQLITE_USE_INMEM_JOURNAL
+  if( rc==SQLITE_OK && eType==SQLITE_OPEN_MAIN_JOURNAL ){
+    osIoctl(fd, F2FS_IOC_START_VOLATILE_WRITE);
+  }
+#endif
+
 open_finished:
   if( rc!=SQLITE_OK ){
     sqlite3_free(p->pUnused);
@@ -37477,6 +37516,7 @@ static const sqlite3_io_methods winIoMethod = {
   winUnlock,                      /* xUnlock */
   winCheckReservedLock,           /* xCheckReservedLock */
   winFileControl,                 /* xFileControl */
+  0,
   winSectorSize,                  /* xSectorSize */
   winDeviceCharacteristics,       /* xDeviceCharacteristics */
   winShmMap,                      /* xShmMap */
@@ -42981,8 +43021,16 @@ static int zeroJournalHdr(Pager *pPager, int doTruncate){
     if( doTruncate || iLimit==0 ){
       rc = sqlite3OsTruncate(pPager->jfd, 0);
     }else{
+#ifdef SQLITE_USE_INMEM_JOURNAL
+      rc = sqlite3OsIoctl(pPager->jfd, F2FS_IOC_RELEASE_VOLATILE_WRITE);
+      if( rc && (errno==ENOTSUP||errno==ENOTTY) ){
+        static const char zeroHdr[28] = {0};
+        rc = sqlite3OsWrite(pPager->jfd, zeroHdr, sizeof(zeroHdr), 0);
+      }
+#else
       static const char zeroHdr[28] = {0};
       rc = sqlite3OsWrite(pPager->jfd, zeroHdr, sizeof(zeroHdr), 0);
+#endif
     }
     if( rc==SQLITE_OK && !pPager->noSync ){
       rc = sqlite3OsSync(pPager->jfd, SQLITE_SYNC_DATAONLY|pPager->syncFlags);
@@ -47860,6 +47908,17 @@ SQLITE_PRIVATE int sqlite3PagerCommitPhaseOne(
       rc = writeMasterJournal(pPager, zMaster);
       if( rc!=SQLITE_OK ) goto commit_phase_one_exit;
   
+#ifdef SQLITE_USE_INMEM_JOURNAL
+      if( isOpen(pPager->jfd) && (zMaster || noSync || pPager->noSync) ){
+        rc = sqlite3OsIoctl(pPager->jfd, F2FS_IOC_ABORT_VOLATILE_WRITE);
+        if( rc && (errno==ENOTSUP||errno==ENOTTY) ){
+          rc = SQLITE_OK;
+        }
+        if( rc != SQLITE_OK ){
+          goto commit_phase_one_exit;
+        }
+      }
+#endif
       /* Sync the journal file and write all dirty pages to the database.
       ** If the atomic-update optimization is being used, this sync will not 
       ** create the journal file or perform any real IO.
@@ -47874,6 +47933,17 @@ SQLITE_PRIVATE int sqlite3PagerCommitPhaseOne(
       rc = syncJournal(pPager, 0);
       if( rc!=SQLITE_OK ) goto commit_phase_one_exit;
   
+#ifdef SQLITE_USE_INMEM_JOURNAL
+      if( isOpen(pPager->fd) && !zMaster && !noSync && !pPager->noSync ){
+        rc = sqlite3OsIoctl(pPager->fd, F2FS_IOC_START_ATOMIC_WRITE);
+        if( rc && (errno==ENOTSUP||errno==ENOTTY) ){
+          rc = SQLITE_OK;
+        }
+        if( rc != SQLITE_OK ){
+          goto commit_phase_one_exit;
+        }
+      }
+#endif
       rc = pager_write_pagelist(pPager,sqlite3PcacheDirtyList(pPager->pPCache));
       if( rc!=SQLITE_OK ){
         assert( rc!=SQLITE_IOERR_BLOCKED );
@@ -47903,6 +47973,14 @@ SQLITE_PRIVATE int sqlite3PagerCommitPhaseOne(
   }
 
 commit_phase_one_exit:
+#ifdef SQLITE_USE_INMEM_JOURNAL
+  if( rc!=SQLITE_OK && isOpen(pPager->jfd) ){
+    sqlite3OsIoctl(pPager->jfd, F2FS_IOC_ABORT_VOLATILE_WRITE);
+  }
+  if( rc!=SQLITE_OK && isOpen(pPager->fd) ){
+    sqlite3OsIoctl(pPager->fd, F2FS_IOC_ABORT_VOLATILE_WRITE);
+  }
+#endif
   if( rc==SQLITE_OK && !pagerUseWal(pPager) ){
     pPager->eState = PAGER_WRITER_FINISHED;
   }
@@ -80832,6 +80910,7 @@ static struct sqlite3_io_methods JournalFileMethods = {
   0,             /* xUnlock */
   0,             /* xCheckReservedLock */
   0,             /* xFileControl */
+  0,
   0,             /* xSectorSize */
   0,             /* xDeviceCharacteristics */
   0,             /* xShmMap */
@@ -81120,6 +81199,7 @@ static const struct sqlite3_io_methods MemJournalMethods = {
   0,                /* xUnlock */
   0,                /* xCheckReservedLock */
   0,                /* xFileControl */
+  0,
   0,                /* xSectorSize */
   0,                /* xDeviceCharacteristics */
   0,                /* xShmMap */
-- 
1.9.1

