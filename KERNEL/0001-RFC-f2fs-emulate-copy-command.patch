From e76f2603237073be49948852e77ca65218c68b39 Mon Sep 17 00:00:00 2001
From: Jaegeuk Kim <jaegeuk@kernel.org>
Date: Fri, 14 Apr 2017 17:47:15 -0700
Subject: [PATCH 1/2] RFC f2fs: emulate copy command

Signed-off-by: Jaegeuk Kim <jaegeuk@kernel.org>
---
 fs/f2fs/gc.c | 41 ++++++++++++++++++++++++++---------------
 1 file changed, 26 insertions(+), 15 deletions(-)

diff --git a/fs/f2fs/gc.c b/fs/f2fs/gc.c
index eb1846a80da3..a573f1ba0ebb 100644
--- a/fs/f2fs/gc.c
+++ b/fs/f2fs/gc.c
@@ -687,13 +687,20 @@ static void move_encrypted_block(struct inode *inode, block_t bidx,
 }
 
 static void move_data_page(struct inode *inode, block_t bidx, int gc_type,
-							unsigned int segno, int off)
+			unsigned int fake, unsigned int segno, int off)
 {
 	struct page *page;
 
-	page = get_lock_data_page(inode, bidx, true);
-	if (IS_ERR(page))
-		return;
+	if (fake == NULL_SEGNO || !S_ISREG(inode->i_mode)) {
+		page = get_lock_data_page(inode, bidx, true);
+		if (IS_ERR(page))
+			return;
+	} else {
+		page = f2fs_grab_cache_page(inode->i_mapping, bidx, true);
+		if (!page)
+			return;
+		SetPageUptodate(page);
+	}
 
 	if (!check_valid_map(F2FS_I_SB(inode), segno, off))
 		goto out;
@@ -745,7 +752,8 @@ static void move_data_page(struct inode *inode, block_t bidx, int gc_type,
  * If the parent node is not valid or the data block address is different,
  * the victim data block is ignored.
  */
-static void gc_data_segment(struct f2fs_sb_info *sbi, struct f2fs_summary *sum,
+static void gc_data_segment(struct f2fs_sb_info *sbi, unsigned int fake,
+		struct f2fs_summary *sum,
 		struct gc_inode_list *gc_list, unsigned int segno, int gc_type)
 {
 	struct super_block *sb = sbi->sb;
@@ -808,16 +816,17 @@ static void gc_data_segment(struct f2fs_sb_info *sbi, struct f2fs_summary *sum,
 				continue;
 			}
 
-			start_bidx = start_bidx_of_node(nofs, inode);
-			data_page = get_read_data_page(inode,
+			if (fake == NULL_SEGNO || !S_ISREG(inode->i_mode)) {
+				start_bidx = start_bidx_of_node(nofs, inode);
+				data_page = get_read_data_page(inode,
 					start_bidx + ofs_in_node, REQ_RAHEAD,
 					true);
-			if (IS_ERR(data_page)) {
-				iput(inode);
-				continue;
+				if (IS_ERR(data_page)) {
+					iput(inode);
+					continue;
+				}
+				f2fs_put_page(data_page, 0);
 			}
-
-			f2fs_put_page(data_page, 0);
 			add_gc_inode(gc_list, inode);
 			continue;
 		}
@@ -844,7 +853,7 @@ static void gc_data_segment(struct f2fs_sb_info *sbi, struct f2fs_summary *sum,
 			if (f2fs_encrypted_inode(inode) && S_ISREG(inode->i_mode))
 				move_encrypted_block(inode, start_bidx, segno, off);
 			else
-				move_data_page(inode, start_bidx, gc_type, segno, off);
+				move_data_page(inode, start_bidx, gc_type, fake, segno, off);
 
 			if (locked) {
 				up_write(&fi->dio_rwsem[WRITE]);
@@ -873,6 +882,7 @@ static int __get_victim(struct f2fs_sb_info *sbi, unsigned int *victim,
 }
 
 static int do_garbage_collect(struct f2fs_sb_info *sbi,
+				unsigned int fake,
 				unsigned int start_segno,
 				struct gc_inode_list *gc_list, int gc_type)
 {
@@ -923,7 +933,7 @@ static int do_garbage_collect(struct f2fs_sb_info *sbi,
 		if (type == SUM_TYPE_NODE)
 			gc_node_segment(sbi, sum->entries, segno, gc_type);
 		else
-			gc_data_segment(sbi, sum->entries, gc_list, segno,
+			gc_data_segment(sbi, fake, sum->entries, gc_list, segno,
 								gc_type);
 
 		stat_inc_seg_count(sbi, type, gc_type);
@@ -957,6 +967,7 @@ int f2fs_gc(struct f2fs_sb_info *sbi, bool sync,
 		.ilist = LIST_HEAD_INIT(gc_list.ilist),
 		.iroot = RADIX_TREE_INIT(GFP_NOFS),
 	};
+	unsigned int fake = segno;
 
 	cpc.reason = __get_cp_reason(sbi);
 gc_more:
@@ -989,7 +1000,7 @@ int f2fs_gc(struct f2fs_sb_info *sbi, bool sync,
 		goto stop;
 	ret = 0;
 
-	if (do_garbage_collect(sbi, segno, &gc_list, gc_type) &&
+	if (do_garbage_collect(sbi, fake, segno, &gc_list, gc_type) &&
 			gc_type == FG_GC)
 		sec_freed++;
 
-- 
2.11.0

